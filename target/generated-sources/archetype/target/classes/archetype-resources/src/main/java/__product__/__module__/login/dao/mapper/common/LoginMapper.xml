<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="${package}.${product}.${module}.login.dao.LoginDao">
    <select id="queryRoleList" resultType="${package}.${product}.${module}.login.dao.entity.RoleEntity"
            parameterType="${package}.${product}.${module}.login.dao.entity.RoleEntity">
        select id AS "id",
        name AS "name",
        description AS "desc",
        created_at AS "createdAt",
        updated_at AS "updatedAt"
        from h_roles
        <where>
            <if test="name!=null and name!=''">
                <bind name="nameLike" value="'%' + name + '%'"/>
                and name like #{nameLike}
            </if>
            <if test="desc!=null and desc!=''">
                <bind name="descLike" value="'%' + desc + '%'"/>
                and description like #{descLike}
            </if>
        </where>
    </select>

    <insert id="saveRoleEntity" parameterType="${package}.${product}.${module}.login.dao.entity.RoleEntity">
        insert into h_roles(name, description, created_at)
        values (#{name}, #{desc}, #{createdAt})
    </insert>

    <update id="updateRoleEntity" parameterType="${package}.${product}.${module}.login.dao.entity.RoleEntity">
        update h_roles
        <set>
            <if test="name!=null and name!=''">
                name = #{name},
            </if>
            <if test="desc!=null and desc!=''">
                description = #{desc},
            </if>
            updated_at=#{updatedAt}
            where id=#{id}
        </set>
    </update>

    <delete id="deleteRoleEntity">
        delete
        from h_roles
        where id = #{id}
    </delete>

    <select id="queryRoleMenus" resultType="java.util.Map">
        select a.menu_id AS "key",
               b.name    AS "label",
               b.url     AS "url"
        from h_role_menus a,
             h_menus b
        where a.role_id = #{id}
          and a.menu_id = b.id
        order by b.created_at asc
    </select>

    <select id="queryRoleMenus2" resultType="${package}.${product}.${module}.login.dao.entity.MenuEntity">
        select b.id          AS "id",
               b.name        AS "name",
               b.url         AS "url",
               b.parent_id   AS "parentId",
               b.menu_level  AS "menuLevel",
               b.order_index AS "orderIndex",
               b.icon_name   AS "iconName",
               b.created_at  AS "createdAt",
               b.updated_at  AS "updatedAt"
        from h_role_menus a,
             h_menus b
        where a.role_id = #{id}
          and a.menu_id = b.id
        order by b.created_at asc
    </select>

    <select id="queryUserList" resultType="${package}.${product}.${module}.login.dao.entity.UserEntity"
            parameterType="${package}.${product}.${module}.login.dao.entity.UserEntity">
        select a.id AS "id",
        a.username AS "username",
        a.password AS "password",
        a.role_id AS "roleId",
        b.name AS "roleName",
        a.created_at AS "createdAt",
        a.updated_at AS "updatedAt"
        from h_users a,h_roles b
        <where>
            a.role_id=b.id
            <if test="username!=null and username!=''">
                <bind name="usernameLike" value="'%' + username + '%'"/>
                and username like #{usernameLike}
            </if>
            <if test="roleId!=null and roleId!=''">
                and role_id = #{roleId}
            </if>
        </where>
    </select>

    <select id="queryUserEntity" resultType="${package}.${product}.${module}.login.dao.entity.UserEntity">
        select a.id AS "id",
        a.username AS "username",
        a.password AS "password",
        a.role_id AS "roleId",
        b.name AS "roleName",
        a.created_at AS "createdAt",
        a.updated_at AS "updatedAt"
        from h_users a,h_roles b
        <where>
            a.role_id=b.id
            and a.id=#{id}
        </where>
    </select>

    <delete id="saveUserEntity" parameterType="${package}.${product}.${module}.login.dao.entity.UserEntity">
        insert into h_users(username, password, role_id, created_at)
        values (#{username}, #{password}, #{roleId}, #{createdAt})
    </delete>

    <update id="updateUserEntity" parameterType="${package}.${product}.${module}.login.dao.entity.UserEntity">
        update h_users
        <set>
            <if test="password!=null and password!=''">
                password = #{password},
            </if>
            <if test="roleId!=null and roleId!=''">
                role_id = #{roleId},
            </if>
            updated_at=#{updatedAt}
            where id=#{id}
        </set>
    </update>

    <delete id="deleteUserEntity">
        delete
        from h_users
        where id = #{id}
    </delete>

    <delete id="deleteUserEntities">
        delete
        from h_users
        where role_id = #{roleId}
    </delete>

    <select id="queryMenuList" resultType="${package}.${product}.${module}.login.dao.entity.MenuEntity"
            parameterType="${package}.${product}.${module}.login.dao.entity.MenuEntity">
        select id AS "id",
        name AS "name",
        url AS "url",
        parent_id AS "parentId",
        menu_level AS "menuLevel",
        order_index AS "orderIndex",
        icon_name AS "iconName",
        created_at AS "createdAt",
        updated_at AS "updatedAt"
        from h_menus
        <where>
            <if test="name!=null and name!=''">
                <bind name="nameLike" value="'%' + name + '%'"/>
                and name like #{nameLike}
            </if>
            <if test="url!=null and url!=''">
                <bind name="urlLike" value="'%' + url + '%'"/>
                and url like #{urlLike}
            </if>
        </where>
        order by created_at asc
    </select>

    <delete id="saveMenuEntity" parameterType="${package}.${product}.${module}.login.dao.entity.MenuEntity">
        insert into h_menus(name, url, parent_id, menu_level, icon_name, order_index, created_at)
        values (#{name}, #{url}, #{parentId}, #{menuLevel}, #{iconName}, #{orderIndex}, #{createdAt})
    </delete>

    <update id="updateMenuEntity" parameterType="${package}.${product}.${module}.login.dao.entity.MenuEntity">
        update h_menus
        set name        = #{name},
            url         = #{url},
            parent_id   = #{parentId},
            menu_level  = #{menuLevel},
            icon_name   = #{iconName},
            order_index = #{orderIndex},
            updated_at=#{updatedAt}
        where id = #{id}
    </update>

    <delete id="deleteMenuEntity">
        delete
        from h_menus
        where id = #{id}
    </delete>

    <delete id="deleteMenuEntities">
        delete
        from h_role_menus
        where role_id = #{roleId}
    </delete>

    <update id="updateUserPassword" parameterType="${package}.${product}.${module}.login.model.PasswordModify">
        update h_users
        set password=#{newPassword}
        where id = #{id}
    </update>

    <select id="queryUserByName" resultType="${package}.${product}.${module}.login.dao.entity.UserEntity">
        select a.id AS "id",
        a.username AS "username",
        a.password AS "password",
        a.role_id AS "roleId",
        b.name AS "roleName",
        a.created_at AS "createdAt",
        a.updated_at AS "updatedAt"
        from h_users a,h_roles b
        <where>
            a.role_id=b.id
            and a.username=#{name}
        </where>
    </select>
</mapper>